from aiogram import F, Router, types
from aiogram.filters import Command
from aiogram.types import Message

import config
import kb
import kb_admin
import text
import bd

router = Router()


@router.message(Command('start'))
async def start_handler(msg: types.Message):
    await bd.cmd_start_db(msg.from_user.id)
    await msg.answer_sticker('CAACAgIAAxkBAAKQxmS8N8nUhHQEuxjD0MWFUwKbIFvDAALYDwACSPJgSxX7xNp4dGuYLwQ')
    await msg.answer(text.greet.format(name=msg.from_user.full_name), reply_markup=kb.menu)
    if msg.from_user.id == config.ADMIN_ID:
        await msg.answer('–í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!', reply_markup=kb_admin.menu_admin)


@router.message(Command('help'))
async def help_handler(msg: types.Message):
    await msg.answer('–ß—Ç–æ–±—ã –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ /start, –ª–∏–±–æ –ú–µ–Ω—é')


# - - - - - - -
@router.message(F.text == "–û –∫–æ–º–ø–∞–Ω–∏–∏ ‚òëÔ∏è")
async def obote(msg: Message):
    await msg.answer(text.obote, reply_markup=kb.obote)


# - - - - - - -
@router.message(F.text == "–ò–ø–æ—Ç–µ–∫–∞ üè°")
async def ipo(msg: Message):
    await msg.answer(text.ipo, reply_markup=kb.ipo)


@router.message(F.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∏–ø–æ—Ç–µ–∫–µ üîô")
async def ipo_back(msg: Message):
    await msg.answer(text.ipo, reply_markup=kb.ipo)


@router.message(F.text == "–ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è üìã")
async def ipo_kred(msg: Message):
    await msg.answer(text.ipo_kred, reply_markup=kb.ipo_kred)


@router.message(F.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫—Ä–µ–¥–∏—Ç–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏ üîô")
async def ipo_kredback(msg: Message):
    await msg.answer(text.ipo_kred, reply_markup=kb.ipo_kred)


@router.message(F.text == "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–µ–¥–∏—Ç–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏ üìã")
async def ipo_kred1(msg: Message):
    await msg.answer(text.ipo_kred1, reply_markup=kb.back_1)


@router.message(F.text == "–î–ª—è —á–µ–≥–æ –µ—ë –∑–Ω–∞—Ç—å –∏ –∫–∞–∫ —É–ª—É—á—à–∏—Ç—å ‚ùì")
async def ipo_kred2(msg: Message):
    await msg.answer(text.ipo_kred2, reply_markup=kb.back_1)


@router.message(F.text == "–ü—Ä–æ–≥—Ä–∞–º–º—ã –∏–ø–æ—Ç–µ–∫–∏ üóÇ")
async def ipo_prog(msg: Message):
    await msg.answer(text.ipo_prog, reply_markup=kb.prog)


@router.message(F.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–æ–≥—Ä–∞–º–º–∞–º –ø–æ –∏–ø–æ—Ç–µ–∫–µ üîô")
async def ipo_progback(msg: Message):
    await msg.answer(text.ipo_prog, reply_markup=kb.prog)


@router.message(F.text == "–£–∑–Ω–∞—Ç—å —Å–≤–æ—é –ø—Ä–æ–≥—Ä–∞–º–º—É üìà")
async def ipo_prog1(msg: Message):
    await msg.answer(text.ipo_prog1, reply_markup=kb.back_2)


@router.message(F.text == "–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º üóû")
async def ipo_prog2(msg: Message):
    await msg.answer(text.ipo_prog2, reply_markup=kb.back_2)


@router.message(F.text == "–ë–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –æ–¥–æ–±—Ä–µ–Ω–∏–µ üîñ")
async def ipo_free(msg: Message):
    await msg.answer(text.ipo_free, reply_markup=kb.back_ipo)


@router.message(F.text == "–ò–ø–æ—Ç–µ—á–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä üñ•")
async def ipo_cal(msg: Message):
    await msg.answer(text.ipo_cal, reply_markup=kb.back_ipo)


# - - - - - -
@router.message(F.text == "–ñ–ö üèò")
async def jk(msg: Message):
    await msg.answer(text.jk, reply_markup=kb.jk)


@router.message(F.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ñ–ö üîô")
async def jk1(msg: Message):
    await msg.answer(text.jk, reply_markup=kb.jk)


@router.message(F.text == "–†–∞–π–æ–Ω—ã üèô")
async def jk_street(msg: Message):
    await msg.answer(text.jk_1, reply_markup=kb.jk_1)


@router.message(F.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–∞–π–æ–Ω–∞–º üîô")
async def jk_streetback(msg: Message):
    await msg.answer(text.jk_1, reply_markup=kb.jk_1)


@router.message(F.text == "–ö–æ–º—Ñ–æ—Ä—Ç+")
async def jk_street1(msg: Message):
    await msg.answer(text.jk_street1, reply_markup=kb.back_3)


@router.message(F.text == "–ö–æ–º—Ñ–æ—Ä—Ç")
async def jk_street2(msg: Message):
    await msg.answer(text.jk_street2, reply_markup=kb.back_3)


@router.message(F.text == "–≠–∫–æ–Ω–æ–º")
async def jk_street3(msg: Message):
    await msg.answer(text.jk_street3, reply_markup=kb.back_3)


# - - - - - -
@router.message(F.text == "–ê–∫—Ü–∏–∏ üõé")
async def akz(msg: Message):
    await msg.answer(text.akz, reply_markup=kb.akz)


@router.message(F.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∞–∫—Ü–∏—è–º üîô")
async def akz_back(msg: Message):
    await msg.answer(text.akz, reply_markup=kb.akz)


@router.message(F.text == "–°–∫–∏–¥–∫–∏ üè∑Ô∏è")
async def akz_1(msg: Message):
    await msg.answer(text.akz_1, reply_markup=kb.back_4)


@router.message(F.text == "–ê–∫—Ü–∏–∏ üëÄ")
async def akz_2(msg: Message):
    await msg.answer(text.akz_2, reply_markup=kb.back_4)


@router.message(F.text == "–ü–æ–¥–∞—Ä–∫–∏ üéÅ")
async def akz_3(msg: Message):
    await msg.answer(text.akz_3, reply_markup=kb.back_4)


# - - - - - -
@router.message(F.text == "–ö–≤–∞—Ä—Ç–∏—Ä—ã üìë")
async def kvar(msg: Message):
    await msg.answer(text.kvar, reply_markup=kb.kvar)


@router.message(F.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–≤–∞—Ä—Ç–∏—Ä–∞–º üîô")
async def kvar_back(msg: Message):
    await msg.answer(text.kvar, reply_markup=kb.kvar)


@router.message(F.text == "–°—Ç–æ–∏–º–æ—Å—Ç—å üí∏")
async def kvar_1(msg: Message):
    await msg.answer(text.kvar_1, reply_markup=kb.back_5)


@router.message(F.text == "–ü–æ–¥–±–æ—Ä–∫–∞ –∫–≤–∞—Ä—Ç–∏—Ä üóΩ")
async def kvar_2(msg: Message):
    await msg.answer(text.kvar_2, reply_markup=kb.back_5)


@router.message(F.text == "–°–¥–µ–ª–∞—Ç—å –ª–∏—á–Ω—É—é –ø–æ–¥–±–æ—Ä–∫—É üîç")
async def kvar_3(msg: Message):
    await msg.answer(text.kvar_3, reply_markup=kb.back_5)


# @router.message(F.text == "–ú–µ–Ω—é")
@router.message(F.text == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
@router.message(F.text == "–ú–µ–Ω—é")
@router.message(F.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚Ü©Ô∏è")
async def menu(msg: Message):
    await msg.answer(text.menu, reply_markup=kb.menu)


@router.message(F.text == "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
async def admin(msg: Message):
    if msg.from_user.id == config.ADMIN_ID:
        await msg.answer('–í—ã –≤–æ—à–ª–∏ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', reply_markup=kb_admin.admin_panel)
    else:
        await msg.answer('–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –Ω–∞–ø–∏—à–∏—Ç–µ /help')


# - - - –ù–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∫–æ–º–∞–Ω–¥–∞ - - -
@router.message()
async def answer(msg: Message):
    await msg.answer('–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –Ω–∞–ø–∏—à–∏—Ç–µ /help')
